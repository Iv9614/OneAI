name: Deploy

on:
  push:
    branches: "github-action"  # Change to your deployment branch

env:
  HOSTNAME: ${{secrets.EC2_HOST}}
  USER_NAME: ${{secrets.EC2_USER}}
  PROJECT__NAME:  ${{ vars.PROJECT__NAME }}
  INIT__EMAIL: ${{ vars.INIT__EMAIL }}
  INIT__USERNAME: ${{ vars.INIT__USERNAME }}
  INIT__PASSWORD: ${{ vars.INIT__PASSWORD }}
  INIT__FULLNAME: ${{ vars.INIT__FULLNAME }}
  DATABASE__SERVER: ${{ vars.DATABASE__SERVER }}
  DATABASE__PORT: ${{ vars.DATABASE__PORT }}
  DATABASE__USER: ${{ vars.DATABASE__USER }}
  DATABASE__PASSWORD: ${{ vars.DATABASE__PASSWORD }}
  DATABASE__DATABASE: ${{ vars.DATABASE__DATABASE }}

jobs:
  build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/oneai-api:latest 

      - name: print docker image
        run: |
          echo " ---- build successful ---- "
          echo "docker image: ${{ secrets.DOCKER_USERNAME }}/oneai-api:latest"


  Deploy:
    name: Deploy to EC2
    runs-on: ubuntu-latest
    
    steps:
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - uses: actions/checkout@v4
      - name: Set up SSH key
        env:
          PRIVATE_KEY: ${{ secrets.EC2_PRIVATE_KEY }}
        run: |
          echo "$PRIVATE_KEY" > private_key && chmod 600 private_key

      - name: Install Docker
        run: |
          ssh -o StrictHostKeyChecking=no -i private_key ${USER_NAME}@${HOSTNAME}  << 'EOF'
           
            if docker --version &> /dev/null; then
              echo "Docker is already installed."
              exit 0
            fi

            # Add Docker's official GPG key:
            sudo apt-get update
            sudo apt-get install ca-certificates curl -y
            sudo install -m 0755 -d /etc/apt/keyrings -y
            sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
            sudo chmod a+r /etc/apt/keyrings/docker.asc

            # Add the repository to Apt sources:
            echo \
              "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
              $(. /etc/os-release && echo "${UBUNTU_CODENAME:-$VERSION_CODENAME}") stable" | \
              sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
            sudo apt-get update

            sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin -y
      
            sudo chmod 666 /var/run/docker.sock   

          EOF

      - name: Install UV
        run: |
          ssh -o StrictHostKeyChecking=no -i private_key ${USER_NAME}@${HOSTNAME}  << 'EOF'
            echo "Installing uv if not present..."
           
            if ! command -v uv &> /dev/null; then
              curl -LsSf https://astral.sh/uv/install.sh | sh
            fi

            echo "UV installed successfully"

          EOF

      - name: Pull Docker Image
        run: |
          echo "Pulling Docker image..."
                
          ssh -o StrictHostKeyChecking=no -i private_key ${USER_NAME}@${HOSTNAME} << 'EOF'
  
            docker stop oneai-api || true
            docker rm oneai-api || true
            
            docker pull ${{ secrets.DOCKER_USERNAME }}/oneai-api:latest
            echo "---- Docker image pulled successfully ----"

            docker run -d \
              -e "PROJECT__NAME=${{ vars.PROJECT__NAME }}"\
              -e "INIT__EMAIL=${{ vars.INIT__EMAIL }}"\
              -e "INIT__USERNAME=${{ vars.INIT__USERNAME }}"\
              -e "INIT__PASSWORD=${{ vars.INIT__PASSWORD }}"\
              -e "INIT__FULLNAME=${{ vars.INIT__FULLNAME }}"\
              -e "DATABASE__SERVER=${{ vars.DATABASE__SERVER }}"\
              -e "DATABASE__PORT=${{ vars.DATABASE__PORT }}"\
              -e "DATABASE__USER=${{ vars.DATABASE__USER }}"\
              -e "DATABASE__PASSWORD=${{ vars.DATABASE__PASSWORD }}"\
              -e "DATABASE__DATABASE=${{ vars.DATABASE__DATABASE }}"\
              --name oneai-api \
              -p 8000:8000 \
              ${{ secrets.DOCKER_USERNAME }}/oneai-api:latest

            echo "---- Container deployed successfully ----" 
          EOF